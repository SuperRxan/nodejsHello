syntax = "proto2";

package aruba_telemetry;

enum deviceClassEnum {
    unclassified                            = 0;
    arubaBeacon                             = 1;
    arubaTag                                = 2;
    zfTag                                   = 3;
    stanleyTag                              = 4;
    virginBeacon                            = 5;
    enoceanSensor                           = 6;
    enoceanSwitch                           = 7;
    iBeacon                                 = 8;
    allBleData                              = 9;
    RawBleData                              = 10;
    eddystone                               = 11;
    assaAbloy                               = 12;
    arubaSensor                             = 13;
}

enum rockerSwitchPosition {
    idle                                    = 0;
    topPressed                              = 1;
    bottomPressed                           = 2;
}

message Meta {
    required uint64 version                 = 1;
    optional string access_token            = 2;
}

message Reporter {
    optional string name                    = 1;
    optional bytes  mac                     = 2;
    optional string ipv4                    = 3;
    optional string ipv6                    = 4;
    optional string hwType                  = 5;
    optional string swVersion               = 6;
    optional string swBuild                 = 7;
    optional uint64 time                    = 8;
}

message Firmware {
    optional string   version               = 1;
    optional string   bankA                 = 2;
    optional string   bankB                 = 3;
}

message History {
    required uint64 time                    = 1;
    required sint32 rssi                    = 2;
    optional int32  rxRadioId               = 3;
    optional int32  antenna                 = 4;
}

message Rssi {
    optional sint32   last                  = 1;
    optional sint32   avg                   = 2;
    optional sint32   max                   = 3;
    repeated History  history               = 4;
    optional sint32   smooth                = 5;
}

enum CellEvent {
    entry                                   = 0;
    exit                                    = 1;
    update                                  = 2;
    ageout                                  = 3;
}

message BeaconEvent  {
    optional CellEvent  event               = 1;
}

message Cell {
    optional bool       isInside            = 1;
    optional float      distance            = 2;
}

message Ibeacon {
    required string     uuid                = 1;
    required uint32     major               = 2;
    required uint32     minor               = 3;
    required sint32     power               = 4;
}

message EddyUID {
    required bytes      nid                 = 1;
    required bytes      bid                 = 2;
}

message EddyURL {
    required uint32     prefix              = 1;
    required bytes      encodedUrl          = 2;
}

message Eddystone {
    optional int32      power               = 1;
    optional EddyUID    uid                 = 2;
    optional EddyURL    url                 = 3;
}

message Beacons {
    optional  Ibeacon     ibeacon           = 1;
    optional  Eddystone   eddystone         = 2;
//  reserved                                  3;
}

enum AccelStatus {
    ok                                      = 0;
    outOfRange                              = 1;
    threshold1                              = 2;
    threshold2                              = 3;
}

message Accelerometer {
    required float  x                       = 1;
    required float  y                       = 2;
    required float  z                       = 3;
    optional AccelStatus status             = 4;
}

message RockerSwitch {
    required string                 id      = 1;
    required rockerSwitchPosition   state   = 2;
}

enum Alarm {
    water                                   = 1;    
    smoke                                   = 2;    
    fire                                    = 3;    
    glassbreak                              = 4;    
    intrusion                               = 5;    
}

enum ContactPosition {
    open                                    = 1;
    closed                                  = 2;
}

message Contact {
    required  uint32           id           = 1;
    required  ContactPosition  state        = 2;
}

message Occupancy {
    optional  uint32        level           = 1;
}

message Sensors {
    optional  Accelerometer accelerometer   = 1;
    optional  int32         battery         = 2;
    optional  float         temperatureC    = 3;
    optional  int32         humidity        = 4;
    optional  float         voltage         = 5;
    optional  int32         illumination    = 6;
    optional  bool          motion          = 7;
//  reserved                                    8;
    optional  int32         CO              = 9;              
    optional  int32         CO2             = 10;              
    optional  int32         VOC             = 11;
    optional  float         resistance      = 12;
    optional  uint32        pressure        = 13;
    repeated  Alarm         alarm           = 14;
    repeated  Contact       contact         = 15;
    optional  Occupancy     occupancy       = 16;              
}

message Stats {
    optional  uint64    uptime              = 1;
    optional  uint64    adv_cnt             = 2;
    optional  uint32    seq_nr              = 3;
    required  uint32    frame_cnt           = 4;
}

enum switchState {
    unknown                                 = 1;    
    on                                      = 2;    
    off                                     = 3;    
}

message Inputs {
    repeated  RockerSwitch rocker           = 1;
    repeated  switchState  switchIndex      = 2;
}

message VendorData {
    optional string     vendor              = 1;
    required bytes      data                = 2;
}

message Reported {
    required bytes      mac                 = 1;
    repeated deviceClassEnum deviceClass    = 2;
    optional string     model               = 3;
    optional Firmware   firmware            = 4;
    optional string     assetId             = 5;
    optional string     publicKey           = 6;
    optional uint64     lastSeen            = 7;
//    reserved                                  8;
    required BeaconEvent bevent             = 9;
    optional Rssi       rssi                = 10;
    optional Cell       cell                = 11;
    repeated Beacons    beacons             = 12;
    optional sint32     txpower             = 13;
    optional Sensors    sensors             = 14;
//    reserved                                  15;
    optional Stats      stats               = 16;
    optional Inputs     inputs              = 17;
    optional VendorData vendorData          = 18;
    optional string     vendorName          = 19;
    optional uint64     sensorTimestamp     = 20;
    optional uint32     flags               = 21;
}

message Telemetry {
  required Meta         meta                = 1;
  required Reporter     reporter            = 2;
  repeated Reported     reported            = 3;
}
